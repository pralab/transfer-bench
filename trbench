#!/usr/bin/env python3

from argparse import ArgumentParser

import wandb
from benchmark.config import PROJECT_ENTITY, PROJECT_NAME
from benchmark.utils import Run, get_config_from_run, get_path_from_run, make_run_list
from benchmark.wandb_reader import WandbReader
from pandas import DataFrame
from wandb.sdk.wandb_run import Run as WandbRun  # noqa: TC002


def parse_args() -> None:
    r"""Parse command line arguments."""
    parser = ArgumentParser(description="Command line tool for managing tasks.")
    subparser = parser.add_subparsers(dest="task", required=True)
    # Subparsers for getting informations on the runs
    parser_info = subparser.add_parser("info", help="Display informations on the runs.")
    parser_info.add_argument(
        dest="action",
        choices=["summary", "active", "completed", "missing"],
        default="summary",
        type=str,
        help="Info to display.",
    )
    # Subparser for running the experiments
    parser_run = subparser.add_parser(
        "run",
        help="Run a job from the list of availables.",
    )
    parser_run.add_argument("--run-id", type=str, help="ID of the run to be executed.")
    parser_run.add_argument("--device", type=str, help="Device to be used.")
    parser_run.add_argument("--batch-size", type=int, help="Batch size to be used.")

    return parser.parse_args()


_COLUMNS = ["id", "status", "attack", "victim_model", "dataset", "campaign"]


def collect_runs() -> str:
    r"""Format the runs for display."""
    # Initialize the WandbReader
    wandb_connections = WandbReader(PROJECT_ENTITY, PROJECT_NAME)
    remote_runs: list[WandbRun] = wandb_connections.get_runs()
    local_runs: list[Run] = make_run_list()
    df_remote_runs = DataFrame(
        [
            {**run.config, "status": run.state, "remote_id": run.id}
            for run in remote_runs
        ]
    )
    ## get local pandas dataframe
    df_local_runs = DataFrame([get_config_from_run(run) for run in local_runs])
    # Merge the two dataframes
    if df_remote_runs.empty:
        df_remote_runs = DataFrame([], columns=_COLUMNS + ["remote_id"])
    df_runs = df_remote_runs.merge(
        df_local_runs,
        how="right",
        on=_COLUMNS,
        indicator=True,
    )
    df_runs.status = df_runs.status.fillna("missing")
    return (
        df_runs.loc[:, _COLUMNS]
        .sort_values(by=["status", "attack", "victim_model", "dataset", "campaign"])
        .reset_index(drop=True)
    )


def get_info(action: str) -> None:
    runs = collect_runs()
    print(runs)


def run(run_id: str, device: str, batch_size: int) -> None:
    # Initialize the WandbReader
    wandb_connections = WandbReader(PROJECT_ENTITY, PROJECT_NAME)


if __name__ == "__main__":
    # Login to Weights & Biases
    wandb.login()
    # Parse the command line arguments

    # make_run_list()
    get_info("summary")
    print()
